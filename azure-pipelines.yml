# if you want to configure triggers for Azure CI see
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=azure-devops&tabs=yaml#tags

jobs:

  # Example job that runs end-to-end tests using Cypress test runner
  #   https://www.cypress.io/

  # Job names can contain alphanumeric characters and '_', cannot start with a number
  - job: Cypress_E2E_Test
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      parallel: 1
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '18.x'
          displayName: 'Install Node.js'

      # NPM modules and Cypress binary should be cached
      # otherwise the install will be too slow
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/caching/?view=azure-devops
      # since the username / user home directory are not available via system variables
      # (there is even an open question about it)
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops
      # just use "/home/vsts" for now

      # Install Node dependencies
      - script: npm ci
        displayName: 'Install NPM dependencies'

      # The next command starts the server and runs Cypress end-to-end tests against it.
      # The test artifacts (screenshots, test output) will be uploaded to Cypress Cloud.
      # To record on Cypress Cloud we need to set CYPRESS_RECORD_KEY environment variable.
      # For setting ci-build-id, BUILD_BUILDNUMBER is a good candidate

      # Note that `npm run start & npx cypress run` is included below for brevity only.
      # This pattern is not ideal because Cypress may run before the server reaches a true ready state.
      # For better solutions see https://on.cypress.io/guides/continuous-integration.
      - script: |
          npx print-env AGENT
          npx print-env BUILD
          npx print-env SYSTEM
          npm install cypress --save-dev
          npx cypress run
        displayName: 'Run Cypress E2E Test'
        env:
          # avoid warnings about terminal
          TERM: xterm
          # map the secret Cypress record key as environment variable for this step
          CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)